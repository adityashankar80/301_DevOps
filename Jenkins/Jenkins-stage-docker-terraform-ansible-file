node {    
	stage('Git CheckOut') 
	{    
		git url: 'https://github.com/chiragvasani36/301_DevOps.git'
	}

	def project_path = "atmosphere/spring-boot-samples/spring-boot-sample-atmosphere"
	dir(project_path) {

	stage('Clean Old Packages') 
	{
		sh label: 'Clean', script: 'mvn clean'
	}
	stage('Maven Compile') 
	{
		sh label: 'Comile', script: 'mvn compile'
	}

	stage('Sonarqube analysis')
	{
		withSonarQubeEnv('sonarqube')
		{
			sh 'mvn sonar:sonar'
        }
	}
	
    stage("Quality Gate"){
          timeout(time: 10, unit: 'MINUTES') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
    }
    
	stage('Maven Package') 
	{
		sh label: 'Testing', script: 'mvn package'
	}

	stage('Archive Package in jfrog') 
	{
		def server= Artifactory.server 'Artifactory Version 4.15.0'
        def uploadSpec= """{
                        "files": [{
                        "pattern": "target/*.jar",
                        "target": "Jenkins-snapshot"}]
                    }"""
                    server.upload (uploadSpec)
	}

	stage('Deploy Code info Docker Env.') 
	{
		sh label: 'Docker', script: 'docker-compose up -d --build'
	}
   
	stage('Geting Ready For Ansible') 
	{
		sh label: 'Docker', script: 'cp -rf target/*.jar ../../../terraform/ansible/templates/atmosphere-v1.jar'
		sh label: 'Jenkins', script: "echo '<h1> TASK BUILD ID: ${env.BUILD_DISPLAY_NAME}</h1>' > ../../../terraform/ansible/templates/jenkins.html"
	}   
    
	stage('Deploy to Prod.') 
	{
		def project_path_1 = "../../../terraform"
		dir(project_path_1) 
		{    
			sh label: 'terraform', script: '/bin/terraform  init'
			sh label: 'terraform', script: '/bin/terraform  apply -input=false -auto-approve'
		}   
	}   
}    
    
}
